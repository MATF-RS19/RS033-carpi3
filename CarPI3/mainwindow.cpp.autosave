#include "mainwindow.h"
#include "ui_mainwindow.h"

#include <QCamera>
#include <QCameraViewfinder>
#include <QKeyEvent>
#include <QCoreApplication>
#include <QByteArray>
#include <QString>
#include <QDebug>
#include <QtSerialPort/QSerialPort>
#include <QTimer>

/* Commands */
#define ENGINE 1
#define SPEED 2
#define REVERSE 4
#define DIRECTION 8
#define HEADLIGHTS 16
#define POSITION 32
#define HORN 64

#define ON 1
#define OFF 0

#define LEFT 1
#define FORWARD 0
#define RIGHT 2

MainWindow::MainWindow(QWidget *parent)
    : QWidget(parent), ui(new Ui::MainWindow) {

    ui->setupUi(this);

    /* Setup Camera */
    mainCamera = new QCamera("/dev/video0", this);
    mainCameraViewFinder = new QCameraViewfinder(this);
    mainCameraLayout = new QVBoxLayout();   // No parent, must delete later
    mainCamera->setViewfinder(mainCameraViewFinder);
    mainCameraLayout->addWidget(mainCameraViewFinder);
    ui->frameCamera->setLayout(mainCameraLayout);

    /* Prepare map */
    variableMap.insert("Engine", 0);
    variableMap.insert("Reverse", 0);
    variableMap.insert("Headlights", 0);
    variableMap.insert("Position", 0);
    variableMap.insert("Horn", 0);
    variableMap.insert("Direction", 0);
    variableMap.insert("Speed", 0);

    /* Preparing USB-SERIAL connection */
    serialOutput = new QSerialPort("/dev/ttyUSB0", this);
    serialOutput->setBaudRate(QSerialPort::Baud115200, QSerialPort::AllDirections);
    if(!serialOutput->open(QIODevice::ReadWrite))
        qFatal("ERROR: Opening port failed.");

    /* Connection Feeder 
     * 
     * QSerial is non-blocking and it causes problems when called from
     * another thread. So, we implemented QTimer for sending data
     */
    timer = new QTimer(this);
    connect(timer, SIGNAL(timeout()), this, SLOT(on_Timer()));
    timer->start(100);
}

MainWindow::~MainWindow() {
    timer->stop();
    mainCamera->stop();
    if(!mainCameraViewFinder->close())
        qFatal("ERROR: Closing viewfinder.");
    delete mainCameraLayout;
    delete ui;
}

void MainWindow::on_Timer() {
    while(!queue.isEmpty()) {
        if(serialOutput->write(queue.first().toUtf8()) == -1)
            qFatal("ERROR: Sending command to SerialPort failed");
        queue.pop_front();
    }
}

QString addNewCommand(int commandType, int commandValue){
    /* Command Example: 64-1 --> This will activate horn. */
    if (commandValue > 128)
        qFatal("ERROR: addNewCommand arguments");
    QString mString;
    mString = mString + QString::number(commandType) + '-' + QString::number(commandValue) + '\n';
    return mString;
}


void MainWindow::on_buttonCamera_clicked() {
    if(ui->labelCamera->text() == "OFF") {
        ui->labelCamera->setText("ON");
        mainCamera->start();
        ui->labelCamera->setStyleSheet("color: green");
    }
    else {
        ui->labelCamera->setText("OFF");
        mainCamera->stop();
        ui->labelCamera->setStyleSheet("color: red");
    }
}

void MainWindow::on_progressbarSpeed_valueChanged(int value) {
    if ( value < 70 )
        ui->progressbarSpeed->setStyleSheet("selection-background-color:green");
    else if ( value >= 70 && value < 90)
        ui->progressbarSpeed->setStyleSheet("selection-background-color:yellow");
    else
        ui->progressbarSpeed->setStyleSheet("selection-background-color:red");
}

void MainWindow::on_buttonHorn_clicked() {
    if(variableMap.value("Horn")) {
        variableMap["Horn"] = OFF;
        queue.append(addNewCommand(HORN,OFF));
        ui->labelHorn->setText("OFF");
        ui->labelHorn->setStyleSheet("color:red");
    }
    else {
        variableMap["Horn"] = ON;
        queue.append(addNewCommand(HORN,ON));
        ui->labelHorn->setText("ON");
        ui->labelHorn->setStyleSheet("color:green");
    }
}

void MainWindow::on_buttonPosition_clicked() {
    if(variableMap.value("Position")) {
        variableMap["Position"] = OFF;
        queue.append(addNewCommand(POSITION,OFF));
        ui->labelPosition->setText("OFF");
        ui->labelPosition->setStyleSheet("color:red");
    }
    else {
        variableMap["Position"] = ON;
        queue.append(addNewCommand(POSITION,ON));
        ui->labelPosition->setText("ON");
        ui->labelPosition->setStyleSheet("color:green");
    }
}

void MainWindow::on_buttonHeadlights_clicked() {
    if(variableMap.value("Headlights")) {
        variableMap["Headlights"] = OFF;
        queue.append(addNewCommand(HEADLIGHTS,OFF));
        ui->labelHeadlights->setText("OFF");
        ui->labelHeadlights->setStyleSheet("color:red");
    }
    else {
        variableMap["Headlights"] = ON;
        queue.append(addNewCommand(HEADLIGHTS,ON));
        ui->labelHeadlights->setText("ON");
        ui->labelHeadlights->setStyleSheet("color:green");
    }
}

void MainWindow::on_buttonReverse_clicked() {
    if(variableMap.value("Reverse")) {
        variableMap["Reverse"] = OFF;
        queue.append(addNewCommand(REVERSE,OFF));
        ui->labelReverse->setText("OFF");
        ui->labelReverse->setStyleSheet("color:red");
    }
    else {
        variableMap["Reverse"] = ON;
        queue.append(addNewCommand(REVERSE,ON));
        ui->labelReverse->setText("ON");
        ui->labelReverse->setStyleSheet("color:green");
    }
}

void MainWindow::on_buttonEngine_clicked() {
    if(variableMap.value("Engine")) {
        variableMap["Engine"] = OFF;
        queue.append(addNewCommand(ENGINE,OFF));
        ui->labelEngine->setText("OFF");
        ui->labelEngine->setStyleSheet("color:red");
    }
    else {
        variableMap["Engine"] = ON;
        queue.append(addNewCommand(ENGINE,ON));
        ui->labelEngine->setText("ON");
        ui->labelEngine->setStyleSheet("color:green");
    }
}

void MainWindow::keyPressEvent(QKeyEvent *event) {
    if(event->isAutoRepeat())
        /* If we long press keyboard button, keyPress and keyRelease (alternating, simultaneously)
         * creates, but we want real long press event (keyPress emits when we push button,
         * and keyRelease when we release button, time between is not important). So, if this method
         * is called after autoRepeat, ignore that call.
         */
        event->ignore();
    else {
        if(event->key() == Qt::Key_A) {
                variableMap["Direction"] = LEFT;
                ui->labelDirection->setText("<<<<<<");
                queue.prepend(addNewCommand(DIRECTION, variableMap["Direction"]));
        }

        if(event->key() == Qt::Key_D) {
                variableMap["Direction"] = RIGHT;
                ui->labelDirection->setText(">>>>>>");
                queue.prepend(addNewCommand(DIRECTION, variableMap["Direction"]));
        }

        if( (event->key() == Qt::Key_W) && (variableMap.value("Speed") < 100)) {
                   variableMap["Speed"] += 5;
                   ui->progressbarSpeed->setValue(variableMap["Speed"]);
                   queue.append(addNewCommand(SPEED,variableMap["Speed"]));
        }

        if( (event->key() == Qt::Key_S) && ( variableMap.value("Speed") > 0) ) {
                   variableMap["Speed"] -= 5;
                   ui->progressbarSpeed->setValue(variableMap["Speed"]);
                   queue.append(addNewCommand(SPEED,variableMap["Speed"]));
        }

        /* Debugging keys */
        if(event->key() == Qt::Key_8) {
            qDebug() << "**** MAP DEBUGGING ****";
            QMapIterator<QString, int> iter(variableMap);
            while(iter.hasNext()) {
                iter.next();
                qDebug() << " -> " << iter.key() << "  :  " << QString::number(iter.value());
            }
            qDebug() << "**********************";
         }

        if(event->key() == Qt::Key_9) {
            qDebug() << "**** LIST DEBUGGING ****";
            QListIterator<QString> iter(queue);
            while(iter.hasNext()) {
                qDebug() << " -> " << iter.next();
            }
            qDebug() << "**********************";
         }

        else
            QWidget::keyPressEvent(event);
    }
}

void MainWindow::keyReleaseEvent(QKeyEvent *event)
{
    if(event->isAutoRepeat())
        event->ignore();
    else
    {
        if((event->key() == Qt::Key_A) || (event->key() == Qt::Key_D))
        {
            variableMap["Direction"] = FORWARD;
            ui->labelDirection->setText("---------");
            queue.prepend(addNewCommand(DIRECTION, variableMap["Direction"]));
        }
        else
            QWidget::keyReleaseEvent(event);
    }
}
